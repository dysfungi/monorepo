# shellcheck disable=SC2034,SC2155,SC3011
if [ -e .env ]; then
    dotenv .env
fi

mkdir -p secrets

# API Keys/Tokens:
GITHUB_USERNAME="$(git config get user.email)"
GITHUB_TOKEN="$(op read 'op://Frankenstructure/GitHub Token - ghcr.io/token')"
export VULTR_API_KEY="$(op read 'op://Frankenstructure/Vultr API Key/password')"
export CLOUDFLARE_API_TOKEN="$(op read 'op://Frankenstructure/Cloudflare API Token - frankenstructure/credential')"

# AWS Keys:
FRANKENSTORAGE_PATH="$(pwd)/secrets/frankenstorage.yaml"
if ! test -e "$FRANKENSTORAGE_PATH"; then
    # https://docs.vultr.com/how-to-use-s3cmd-with-vultr-object-storage
    vultr --output=json object-storage list \
        | jq > "$FRANKENSTORAGE_PATH" '.object_storages[] | select(.label == "frankenstorage")'
fi
export AWS_ACCESS_KEY_ID="$(jq --raw-output '.s3_access_key' "$FRANKENSTORAGE_PATH")"
export AWS_SECRET_ACCESS_KEY="$(jq --raw-output '.s3_secret_key' "$FRANKENSTORAGE_PATH")"
watch_file "$FRANKENSTORAGE_PATH"

# Kubectl Config:
KUBECONFIG_PATH="$(pwd)/secrets/frank8s.yaml"
if ! test -e "$KUBECONFIG_PATH"; then
    vultr --output=json kubernetes list \
        | jq --raw-output '.vke_clusters[] | select(.label == "frank8s").id' \
        | xargs vultr kubernetes config \
        | base64 --decode > "$KUBECONFIG_PATH"
    chmod 600 "$KUBECONFIG_PATH"
fi
watch_file "$KUBECONFIG_PATH"
export KUBECONFIG="$KUBECONFIG_PATH"

# SMTP
SMTP_CONFIG="$(op item get 'ProtonMail SMTP - Monitoring' \
                 --vault=Frankenstructure \
                 --reveal \
                 --fields="SMTP.server,SMTP.port,SMTP.username,SMTP.password" \
                 --format=json \
               | jq 'map({key:.label,value}) | from_entries')"

# Terraform Variables:
export TF_VAR_automate_dropbox_client_id="$(op read 'op://Frankenstructure/Dropbox App - Automatox/username')"
export TF_VAR_automate_dropbox_client_secret="$(op read 'op://Frankenstructure/Dropbox App - Automatox/credential')"
export TF_VAR_automate_postgres_password="$(op read 'op://Frankenstructure/Postgres - AutoMate/password')"
export TF_VAR_automate_todoist_client_id="$(op read 'op://Frankenstructure/Todoist App - AutoMate/username')"
export TF_VAR_automate_todoist_client_secret="$(op read 'op://Frankenstructure/Todoist App - AutoMate/credential')"
export TF_VAR_automate_todoist_verification_token="$(op read 'op://Frankenstructure/Todoist App - AutoMate/verification token')"
export TF_VAR_cloudflare_api_token="$CLOUDFLARE_API_TOKEN"
export TF_VAR_discord_webhook_alerts="$(op read 'op://Frankenstructure/Discord Webhook - breaktheloop/url')"
export TF_VAR_dockerconfigjson="$(op read 'op://Frankenstructure/Vultr Container Registry - Frankistry/credential')"
export TF_VAR_exporter_postgres_password="$(op read 'op://Frankenstructure/Postgres - Exporter/password')"
export TF_VAR_github_username="$GITHUB_USERNAME"
export TF_VAR_github_token="$GITHUB_TOKEN"
export TF_VAR_grafana_admin_password="$(op read 'op://Frankenstructure/Grafana - frank.sh/password')"
export TF_VAR_healthchecksio_api_key="$(op read 'op://Frankenstructure/Healthchecks.io API Key/credential')"
export TF_VAR_home_ip="$(curl --silent icanhazip.com)"
export TF_VAR_honeycomb_key_id="$(op read 'op://Frankenstructure/Honeycomb.io Management API Key - prod/username')"
export TF_VAR_honeycomb_key_secret="$(op read 'op://Frankenstructure/Honeycomb.io Management API Key - prod/credential')"
export TF_VAR_kubeconfig_path="$KUBECONFIG_PATH"
export TF_VAR_miniflux_admin_username="$(op read 'op://Frankenstructure/Miniflux - frank.sh/username')"
export TF_VAR_miniflux_admin_password="$(op read 'op://Frankenstructure/Miniflux - frank.sh/password')"
export TF_VAR_miniflux_postgres_password="$(op read 'op://Frankenstructure/Postgres - Miniflux/password')"
export TF_VAR_smtp_password="$(op read 'op://Frankenstructure/ProtonMail SMTP - Monitoring/SMTP/password')"
export TF_VAR_smtp_port="$(op read 'op://Frankenstructure/ProtonMail SMTP - Monitoring/SMTP/port')"
export TF_VAR_smtp_server="$(op read 'op://Frankenstructure/ProtonMail SMTP - Monitoring/SMTP/server')"
export TF_VAR_smtp_username="$(op read 'op://Frankenstructure/ProtonMail SMTP - Monitoring/SMTP/username')"
export TF_VAR_todoist_email="$(op read 'op://Frankenstructure/Todoist Project - Frankenstructure/email')"
export TF_VAR_vultr_api_key="$VULTR_API_KEY"

# Docker logins
docker login --username "$GITHUB_USERNAME" --password-stdin <<< "$GITHUB_TOKEN" ghcr.io
FRANKISTRY_PATH="$(pwd)/secrets/frankistry.json"
if test -e "$FRANKISTRY_PATH"; then
    REGISTRY="$(jq --raw-output '.urn' "$FRANKISTRY_PATH")"
else
    vultr --output=json container-registry list \
       | jq '.registries[] | select(.name == "frankistry")' > "$FRANKISTRY_PATH"
    REGISTRY="$(jq --raw-output '.urn' "$FRANKISTRY_PATH")"
    docker login \
        --username "$(jq --raw-output '.root_user.username' "$FRANKISTRY_PATH")" \
        --password-stdin <<< "$(jq --raw-output '.root_user.password' "$FRANKISTRY_PATH")" \
        "$REGISTRY";
fi
export REGISTRY
