name: Continuous Integration & Deployment

on:
  push:
    branches:
      - main
  pull_request:

permissions: read-all

jobs:
  lint:
    uses: ./.github/workflows/lint.yaml

  init-secrets:
    runs-on: ubuntu-latest
    steps:
      - id: op-secrets
        uses: 1password/load-secrets-action@v2
        with:
          export-env: false
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          cloudflare_api_token: op://Frankenstructure/Cloudflare API Token - frankenstructure/credential
          vultr_api_key: op://Frankenstructure/Vultr API Key/password
      - uses: defrank/action-vultr@v2024.10.20-1
        with:
          token: ${{ steps.op-secrets.outputs.vultr_api_key }}
      - id: vultr-s3-keys
        env:
          VULTR_API_KEY: ${{ steps.op-secrets.outputs.vultr_api_key }}
        run: >
          vultr-cli --output=json object-storage list
          | jq --raw-output >> "$GITHUB_OUTPUT" '
          .object_storages[]
          | select(.label == "frankenstorage")
          | ["s3_access_key=" + .s3_access_key, "s3_secret_key=" + .s3_secret_key]
          | join("\n")
          '
      - id: vultr-registry
        env:
          VULTR_API_KEY: ${{ steps.op-secrets.outputs.vultr_api_key }}
        run: >
          vultr-cli --output=json container-registry list
          | jq --raw-output >> "$GITHUB_OUTPUT" '
          .registries[]
          | select(.name == "frankistry")
          | [ "registry_urn=" + .urn
            , "registry_username=" + .root_user.username
            , "registry_password=" + .root_user.password
            ]
          | join("\n")
          '
      - id: enc-cloudflare-api-token
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: encode
          in: ${{ steps.op-secrets.outputs.cloudflare_api_token }}
      - id: enc-s3-access-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: encode
          in: ${{ steps.vultr-s3-keys.outputs.s3_access_key }}
      - id: enc-s3-secret-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: encode
          in: ${{ steps.vultr-s3-keys.outputs.s3_secret_key }}
      - id: enc-vultr-api-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: encode
          in: ${{ steps.op-secrets.outputs.vultr_api_key }}
      - id: enc-vultr-registry-password
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: encode
          in: ${{ steps.vultr-registry.outputs.registry_password }}
      - id: enc-vultr-registry-urn
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: encode
          in: ${{ steps.vultr-registry.outputs.registry_urn }}
      - id: enc-vultr-registry-username
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: encode
          in: ${{ steps.vultr-registry.outputs.registry_username }}
    outputs:
      enc_cloudflare_api_token: ${{ steps.enc-cloudflare-api-token.outputs.out }}
      enc_s3_access_key: ${{ steps.enc-s3-access-key.outputs.out }}
      enc_s3_secret_key: ${{ steps.enc-s3-secret-key.outputs.out }}
      enc_vultr_api_key: ${{ steps.enc-vultr-api-key.outputs.out }}
      enc_vultr_registry_password: ${{ steps.enc-vultr-registry-password.outputs.out }}
      enc_vultr_registry_urn: ${{ steps.enc-vultr-registry-urn.outputs.out }}
      enc_vultr_registry_username: ${{ steps.enc-vultr-registry-username.outputs.out }}

  test-automate-api:
    needs:
      - lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.403
      - name: Test
        working-directory: fsharp/api/automate
        run: dotnet test ./AutoMate.Tests

  build-automate-api:
    needs:
      - test-automate-api
      - init-secrets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - id: app-version
        working-directory: fsharp/api/automate
        run: >
          grep --ignore-case --max-count=1 '<version>' AutoMate/AutoMate.fsproj
          | sed -E
          -e 's|.*<version>(.*)</version>.*|\1-${{ github.ref_name }}.${{ github.run_number }}|i'
          -e 's|[^a-z0-9_.-]+|-|gi'
          -e 's|^|out=|'
          >> "$GITHUB_OUTPUT"
      - name: Build
        working-directory: fsharp/api/automate
        run: docker compose build
        env:
          APP_VERSION: ${{ steps.app-version.outputs.out }}
      - id: vultr-registry-password
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.init-secrets.outputs.enc_vultr_registry_password }}
      - id: vultr-registry-urn
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.init-secrets.outputs.enc_vultr_registry_urn }}
      - id: vultr-registry-username
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.init-secrets.outputs.enc_vultr_registry_username }}
      - name: Docker login
        run: >
          docker login
          --username "$REGISTRY_USERNAME"
          --password-stdin <<< "$REGISTRY_PASSWORD"
          "$REGISTRY_URN"
        env:
          REGISTRY_PASSWORD: ${{ steps.vultr-registry-password.outputs.out }}
          REGISTRY_URN: ${{ steps.vultr-registry-urn.outputs.out }}
          REGISTRY_USERNAME: ${{ steps.vultr-registry-username.outputs.out }}
      - name: Push
        if: github.ref_name == 'main'
        working-directory: fsharp/api/automate
        run: docker compose push api
        env:
          APP_VERSION: ${{ steps.app-version.outputs.out }}
    outputs:
      app_version: ${{ steps.app-version.outputs.out }}

  check-deploy-prod:
    if: github.ref_name == 'main'
    environment: production
    needs:
      - lint
    runs-on: ubuntu-latest
    steps:
      - run: echo "Deploying to production!"

  deploy-frankenstructure:
    environment: production
    needs:
      - check-deploy-prod
      - init-secrets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: opentofu/setup-opentofu@v1
      - id: cloudflare-api-token
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.init-secrets.outputs.enc_cloudflare_api_token }}
      - id: s3-access-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.init-secrets.outputs.enc_s3_access_key }}
      - id: s3-secret-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.init-secrets.outputs.enc_s3_secret_key }}
      - id: vultr-api-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.init-secrets.outputs.enc_vultr_api_key }}
      - name: Initialize tofu
        working-directory: terraform/infrastructure/frankenstructure
        run: tofu init -input=false -upgrade
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.s3-access-key.outputs.out }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.s3-secret-key.outputs.out }}
          TF_VAR_cloudflare_api_token: ${{ steps.cloudflare-api-token.outputs.out }}
          TF_VAR_vultr_api_key: ${{ steps.vultr-api-key.outputs.out }}
      - name: Deploy
        working-directory: terraform/infrastructure/frankenstructure
        run: tofu apply -auto-approve -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.s3-access-key.outputs.out }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.s3-secret-key.outputs.out }}
          TF_VAR_cloudflare_api_token: ${{ steps.cloudflare-api-token.outputs.out }}
          TF_VAR_vultr_api_key: ${{ steps.vultr-api-key.outputs.out }}

  secrets:
    runs-on: ubuntu-latest
    needs:
      - init-secrets
      - deploy-frankenstructure
    steps:
      - id: vultr-api-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.init-secrets.outputs.enc_vultr_api_key }}
      - id: op-secrets
        uses: 1password/load-secrets-action@v2
        with:
          export-env: false
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          discord_webhook_alerts: op://Frankenstructure/Discord Webhook - breaktheloop/url
          dockerconfigjson: op://Frankenstructure/Vultr Container Registry - Frankistry/credential
          grafana_admin_password: op://Frankenstructure/Grafana - frank.sh/password
          healthchecksio_api_key: op://Frankenstructure/Healthchecks.io API Key/credential
          smtp_password: op://Frankenstructure/ProtonMail SMTP - Monitoring/SMTP/password
          smtp_port: op://Frankenstructure/ProtonMail SMTP - Monitoring/SMTP/port
          smtp_server: op://Frankenstructure/ProtonMail SMTP - Monitoring/SMTP/server
          smtp_username: op://Frankenstructure/ProtonMail SMTP - Monitoring/SMTP/username
          todoist_email: op://Frankenstructure/Todoist Project - Frankenstructure/email
      - uses: defrank/action-vultr@v2024.10.20-1
        with:
          token: ${{ steps.vultr-api-key.outputs.out }}
      - id: kubeconfig-base64
        env:
          VULTR_API_KEY: ${{ steps.vultr-api-key.outputs.out }}
        run: >
          echo -n "out=" >> "$GITHUB_OUTPUT";
          vultr-cli --output=json kubernetes list
          | jq --raw-output '.vke_clusters[] | select(.label == "frank8s").id'
          | xargs -- vultr-cli kubernetes config >> "$GITHUB_OUTPUT"
      - id: enc-discord-webhook-alerts
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: encode
          in: ${{ steps.op-secrets.outputs.discord_webhook_alerts }}
      - id: enc-dockerconfigjson
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: encode
          in: ${{ steps.op-secrets.outputs.dockerconfigjson }}
      - id: enc-grafana-admin-password
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: encode
          in: ${{ steps.op-secrets.outputs.grafana_admin_password }}
      - id: enc-healthchecksio-api-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: encode
          in: ${{ steps.op-secrets.outputs.healthchecksio_api_key }}
      - id: enc-kubeconfig-base64
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: encode
          in: ${{ steps.kubeconfig-base64.outputs.out }}
      - id: enc-smtp-password
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: encode
          in: ${{ steps.op-secrets.outputs.smtp_password }}
      - id: enc-smtp-port
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: encode
          in: ${{ steps.op-secrets.outputs.smtp_port }}
      - id: enc-smtp-server
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: encode
          in: ${{ steps.op-secrets.outputs.smtp_server }}
      - id: enc-smtp-username
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: encode
          in: ${{ steps.op-secrets.outputs.smtp_username }}
      - id: enc-todoist-email
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: encode
          in: ${{ steps.op-secrets.outputs.todoist_email }}
    outputs:
      enc_cloudflare_api_token: ${{ needs.init-secrets.outputs.enc_cloudflare_api_token }}
      enc_discord_webhook_alerts: ${{ steps.enc-discord-webhook-alerts.outputs.out }}
      enc_dockerconfigjson: ${{ steps.enc-dockerconfigjson.outputs.out }}
      enc_grafana_admin_password: ${{ steps.enc-grafana-admin-password.outputs.out }}
      enc_healthchecksio_api_key: ${{ steps.enc-healthchecksio-api-key.outputs.out }}
      enc_kubeconfig_base64: ${{ steps.enc-kubeconfig-base64.outputs.out }}
      enc_s3_access_key: ${{ needs.init-secrets.outputs.enc_s3_access_key }}
      enc_s3_secret_key: ${{ needs.init-secrets.outputs.enc_s3_secret_key }}
      enc_smtp_password: ${{ steps.enc-smtp-password.outputs.out }}
      enc_smtp_port: ${{ steps.enc-smtp-port.outputs.out }}
      enc_smtp_server: ${{ steps.enc-smtp-server.outputs.out }}
      enc_smtp_username: ${{ steps.enc-smtp-username.outputs.out }}
      enc_todoist_email: ${{ steps.enc-todoist-email.outputs.out }}
      enc_vultr_api_key: ${{ needs.init-secrets.outputs.enc_vultr_api_key }}
      enc_vultr_registry_password: ${{ needs.init-secrets.outputs.enc_vultr_registry_password }}
      enc_vultr_registry_urn: ${{ needs.init-secrets.outputs.enc_vultr_registry_urn }}
      enc_vultr_registry_username: ${{ needs.init-secrets.outputs.enc_vultr_registry_username }}

  deploy-monitoring:
    environment: production
    needs:
      - check-deploy-prod
      - secrets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: opentofu/setup-opentofu@v1
      - id: op-secrets
        uses: 1password/load-secrets-action@v2
        with:
          export-env: false
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          exporter_postgres_password: op://Frankenstructure/Postgres - Exporter/password
      - id: cloudflare-api-token
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_cloudflare_api_token }}
      - id: discord-webhook-alerts
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_discord_webhook_alerts }}
      - id: grafana-admin-password
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_grafana_admin_password }}
      - id: healthchecksio-api-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_healthchecksio_api_key }}
      - id: kubeconfig-base64
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_kubeconfig_base64 }}
      - id: kubeconfig-path
        run: |
          base64 --decode > "kubeconfig.yaml" <<< "${{ steps.kubeconfig-base64.outputs.out }}"
          echo "out=$PWD/kubeconfig.yaml" >> "$GITHUB_OUTPUT"
      - id: s3-access-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_s3_access_key }}
      - id: s3-secret-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_s3_secret_key }}
      - id: smtp-password
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_smtp_password }}
      - id: smtp-port
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_smtp_port }}
      - id: smtp-server
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_smtp_server }}
      - id: smtp-username
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_smtp_username }}
      - id: todoist-email
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_todoist_email }}
      - id: vultr-api-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_vultr_api_key }}
      - name: Initialize tofu
        working-directory: terraform/infrastructure/monitoring
        run: tofu init -input=false -upgrade
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.s3-access-key.outputs.out }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.s3-secret-key.outputs.out }}
          TF_VAR_cloudflare_api_token: ${{ steps.cloudflare-api-token.outputs.out }}
          TF_VAR_discord_webhook_alerts: ${{ steps.discord-webhook-alerts.outputs.out }}
          TF_VAR_exporter_postgres_password: ${{ steps.op-secrets.outputs.exporter_postgres_password }}
          TF_VAR_grafana_admin_password: ${{ steps.grafana-admin-password.outputs.out }}
          TF_VAR_healthchecksio_api_key: ${{ steps.healthchecksio-api-key.outputs.out }}
          TF_VAR_kubeconfig_path: ${{ steps.kubeconfig-path.outputs.out }}
          TF_VAR_smtp_password: ${{ steps.smtp-password.outputs.out }}
          TF_VAR_smtp_port: ${{ steps.smtp-port.outputs.out }}
          TF_VAR_smtp_server: ${{ steps.smtp-server.outputs.out }}
          TF_VAR_smtp_username: ${{ steps.smtp-username.outputs.out }}
          TF_VAR_todoist_email: ${{ steps.todoist-email.outputs.out }}
          TF_VAR_vultr_api_key: ${{ steps.vultr-api-key.outputs.out }}
      - name: Deploy
        working-directory: terraform/infrastructure/monitoring
        run: tofu apply -auto-approve -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.s3-access-key.outputs.out }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.s3-secret-key.outputs.out }}
          TF_VAR_cloudflare_api_token: ${{ steps.cloudflare-api-token.outputs.out }}
          TF_VAR_discord_webhook_alerts: ${{ steps.discord-webhook-alerts.outputs.out }}
          TF_VAR_exporter_postgres_password: ${{ steps.op-secrets.outputs.exporter_postgres_password }}
          TF_VAR_grafana_admin_password: ${{ steps.grafana-admin-password.outputs.out }}
          TF_VAR_healthchecksio_api_key: ${{ steps.healthchecksio-api-key.outputs.out }}
          TF_VAR_kubeconfig_path: ${{ steps.kubeconfig-path.outputs.out }}
          TF_VAR_smtp_password: ${{ steps.smtp-password.outputs.out }}
          TF_VAR_smtp_port: ${{ steps.smtp-port.outputs.out }}
          TF_VAR_smtp_server: ${{ steps.smtp-server.outputs.out }}
          TF_VAR_smtp_username: ${{ steps.smtp-username.outputs.out }}
          TF_VAR_todoist_email: ${{ steps.todoist-email.outputs.out }}
          TF_VAR_vultr_api_key: ${{ steps.vultr-api-key.outputs.out }}

  deploy-gateway:
    environment: production
    needs:
      - check-deploy-prod
      - secrets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: opentofu/setup-opentofu@v1
      - id: cloudflare-api-token
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_cloudflare_api_token }}
      - id: kubeconfig-base64
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_kubeconfig_base64 }}
      - id: kubeconfig-path
        run: |
          base64 --decode > "kubeconfig.yaml" <<< "${{ steps.kubeconfig-base64.outputs.out }}"
          echo "out=$PWD/kubeconfig.yaml" >> "$GITHUB_OUTPUT"
      - id: s3-access-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_s3_access_key }}
      - id: s3-secret-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_s3_secret_key }}
      - name: Initialize tofu
        working-directory: terraform/infrastructure/gateway
        run: tofu init -input=false -upgrade
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.s3-access-key.outputs.out }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.s3-secret-key.outputs.out }}
          TF_VAR_cloudflare_api_token: ${{ steps.cloudflare-api-token.outputs.out }}
          TF_VAR_github_token: ${{ github.token }}
          TF_VAR_github_username: ${{ github.triggering_actor }}
          TF_VAR_kubeconfig_path: ${{ steps.kubeconfig-path.outputs.out }}
      - name: Deploy
        working-directory: terraform/infrastructure/gateway
        run: tofu apply -auto-approve -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.s3-access-key.outputs.out }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.s3-secret-key.outputs.out }}
          TF_VAR_cloudflare_api_token: ${{ steps.cloudflare-api-token.outputs.out }}
          TF_VAR_github_token: ${{ github.token }}
          TF_VAR_github_username: ${{ github.triggering_actor }}
          TF_VAR_kubeconfig_path: ${{ steps.kubeconfig-path.outputs.out }}

  deployed-foundation:
    environment: production
    needs:
      - deploy-gateway
      - deploy-monitoring
    runs-on: ubuntu-latest
    steps:
      - run: echo "Deployed foundational infrastructure!"

  deploy-httpbin:
    environment: production
    needs:
      - secrets
      - deployed-foundation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: opentofu/setup-opentofu@v1
      - id: kubeconfig-base64
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_kubeconfig_base64 }}
      - id: kubeconfig-path
        run: |
          base64 --decode > "kubeconfig.yaml" <<< "${{ steps.kubeconfig-base64.outputs.out }}"
          echo "out=$PWD/kubeconfig.yaml" >> "$GITHUB_OUTPUT"
      - id: s3-access-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_s3_access_key }}
      - id: s3-secret-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_s3_secret_key }}
      - name: Initialize tofu
        working-directory: terraform/applications/httpbin
        run: tofu init -input=false -upgrade
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.s3-access-key.outputs.out }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.s3-secret-key.outputs.out }}
          TF_VAR_kubeconfig_path: ${{ steps.kubeconfig-path.outputs.out }}
      - name: Deploy
        working-directory: terraform/applications/httpbin
        run: tofu apply -auto-approve -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.s3-access-key.outputs.out }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.s3-secret-key.outputs.out }}
          TF_VAR_kubeconfig_path: ${{ steps.kubeconfig-path.outputs.out }}

  deploy-n8n:
    environment: production
    needs:
      - secrets
      - deployed-foundation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: opentofu/setup-opentofu@v1
      - id: kubeconfig-base64
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_kubeconfig_base64 }}
      - id: kubeconfig-path
        run: |
          base64 --decode > "kubeconfig.yaml" <<< "${{ steps.kubeconfig-base64.outputs.out }}"
          echo "out=$PWD/kubeconfig.yaml" >> "$GITHUB_OUTPUT"
      - id: s3-access-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_s3_access_key }}
      - id: s3-secret-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_s3_secret_key }}
      - name: Initialize tofu
        working-directory: terraform/applications/n8n
        run: tofu init -input=false -upgrade
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.s3-access-key.outputs.out }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.s3-secret-key.outputs.out }}
          TF_VAR_kubeconfig_path: ${{ steps.kubeconfig-path.outputs.out }}
      - name: Deploy
        working-directory: terraform/applications/n8n
        run: tofu apply -auto-approve -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.s3-access-key.outputs.out }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.s3-secret-key.outputs.out }}
          TF_VAR_kubeconfig_path: ${{ steps.kubeconfig-path.outputs.out }}

  deploy-node-red:
    environment: production
    needs:
      - secrets
      - deployed-foundation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: opentofu/setup-opentofu@v1
      - id: kubeconfig-base64
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_kubeconfig_base64 }}
      - id: kubeconfig-path
        run: |
          base64 --decode > "kubeconfig.yaml" <<< "${{ steps.kubeconfig-base64.outputs.out }}"
          echo "out=$PWD/kubeconfig.yaml" >> "$GITHUB_OUTPUT"
      - id: s3-access-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_s3_access_key }}
      - id: s3-secret-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_s3_secret_key }}
      - name: Initialize tofu
        working-directory: terraform/applications/node-red
        run: tofu init -input=false -upgrade
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.s3-access-key.outputs.out }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.s3-secret-key.outputs.out }}
          TF_VAR_github_token: ${{ github.token }}
          TF_VAR_github_username: ${{ github.triggering_actor }}
          TF_VAR_kubeconfig_path: ${{ steps.kubeconfig-path.outputs.out }}
      - name: Deploy
        working-directory: terraform/applications/node-red
        run: tofu apply -auto-approve -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.s3-access-key.outputs.out }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.s3-secret-key.outputs.out }}
          TF_VAR_github_token: ${{ github.token }}
          TF_VAR_github_username: ${{ github.triggering_actor }}
          TF_VAR_kubeconfig_path: ${{ steps.kubeconfig-path.outputs.out }}

  deploy-windmill:
    environment: production
    needs:
      - secrets
      - deployed-foundation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: opentofu/setup-opentofu@v1
      - id: kubeconfig-base64
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_kubeconfig_base64 }}
      - id: kubeconfig-path
        run: |
          base64 --decode > "kubeconfig.yaml" <<< "${{ steps.kubeconfig-base64.outputs.out }}"
          echo "out=$PWD/kubeconfig.yaml" >> "$GITHUB_OUTPUT"
      - id: op-secrets
        uses: 1password/load-secrets-action@v2
        with:
          export-env: false
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          windmill_postgres_password: op://Frankenstructure/Postgres - Windmill/password
          windmill_probe_token: op://Frankenstructure/Windmill Webhook - Probe/credential
          windmill_probe_url: op://Frankenstructure/Windmill Webhook - Probe/url
      - id: s3-access-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_s3_access_key }}
      - id: s3-secret-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_s3_secret_key }}
      - id: vultr-api-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_vultr_api_key }}
      - name: Initialize tofu
        working-directory: terraform/applications/windmill
        run: tofu init -input=false -upgrade
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.s3-access-key.outputs.out }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.s3-secret-key.outputs.out }}
          TF_VAR_kubeconfig_path: ${{ steps.kubeconfig-path.outputs.out }}
          TF_VAR_vultr_api_key: ${{ steps.vultr-api-key.outputs.out }}
          TF_VAR_windmill_postgres_password: ${{ steps.op-secrets.outputs.windmill_postgres_password }}
          TF_VAR_windmill_probe_token: ${{ steps.op-secrets.outputs.windmill_probe_token }}
          TF_VAR_windmill_probe_url: ${{ steps.op-secrets.outputs.windmill_probe_url }}
      - name: Deploy
        working-directory: terraform/applications/windmill
        run: tofu apply -auto-approve -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.s3-access-key.outputs.out }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.s3-secret-key.outputs.out }}
          TF_VAR_kubeconfig_path: ${{ steps.kubeconfig-path.outputs.out }}
          TF_VAR_vultr_api_key: ${{ steps.vultr-api-key.outputs.out }}
          TF_VAR_windmill_postgres_password: ${{ steps.op-secrets.outputs.windmill_postgres_password }}
          TF_VAR_windmill_probe_token: ${{ steps.op-secrets.outputs.windmill_probe_token }}
          TF_VAR_windmill_probe_url: ${{ steps.op-secrets.outputs.windmill_probe_url }}

  deploy-automate-api:
    environment: production
    needs:
      - secrets
      - deployed-foundation
      - build-automate-api
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: opentofu/setup-opentofu@v1
      - id: op-secrets
        uses: 1password/load-secrets-action@v2
        with:
          export-env: false
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          automate_dropbox_client_id: op://Frankenstructure/Dropbox App - Automatox/username
          automate_dropbox_client_secret: op://Frankenstructure/Dropbox App - Automatox/credential
          automate_postgres_password: op://Frankenstructure/Postgres - AutoMate/password
          automate_todoist_client_id: op://Frankenstructure/Todoist App - AutoMate/username
          automate_todoist_client_secret: op://Frankenstructure/Todoist App - AutoMate/credential
      - id: kubeconfig-base64
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_kubeconfig_base64 }}
      - id: dockerconfigjson
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_dockerconfigjson }}
      - id: kubeconfig-path
        run: |
          base64 --decode > "kubeconfig.yaml" <<< "${{ steps.kubeconfig-base64.outputs.out }}"
          echo "out=$PWD/kubeconfig.yaml" >> "$GITHUB_OUTPUT"
      - id: s3-access-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_s3_access_key }}
      - id: s3-secret-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_s3_secret_key }}
      - id: vultr-api-key
        uses: cloudposse/github-action-secret-outputs@main
        with:
          secret: ${{ secrets.GPG_PASSPHRASE }}
          op: decode
          in: ${{ needs.secrets.outputs.enc_vultr_api_key }}
      - id: database-instance
        env:
          VULTR_API_KEY: ${{ steps.vultr-api-key.outputs.out }}
        run: >
          vultr-cli --output=json database list
          | jq --raw-output >> "$GITHUB_OUTPUT" '
          .databases[]
          | select(.tag == "postgres")
          | [ "database_id=" + .id
            , "database_user=" + .user
            , "database_password=" + .password
            , "database_host=" + .public_host
            , "database_port=" + .port
            ]
          | join("\n")
          '
      - id: database-user-creds
        env:
          DATABASE_ID: ${{ steps.database-instance.outputs.database_id }}
          VULTR_API_KEY: ${{ steps.vultr-api-key.outputs.out }}
        run: >
          vultr-cli --output=json database user list "$DATABASE_ID"
          | jq --raw-output >> "$GITHUB_OUTPUT" '
          .users[]
          | select(.username == "automate_api")
          | [ "database_user=" + .username
            , "database_password=" + .password
          ]
          | join("\n")
          '
      - id: database-url
        env:
          DB_USER: ${{ steps.database-user-creds.outputs.database_user }}
          DB_PASSWORD: ${{ steps.database-user-creds.outputs.database_password }}
          DB_HOST: ${{ steps.database-instance.outputs.database_host }}
          DB_PORT: ${{ steps.database-instance.outputs.database_port }}
          DB_NAME: automate_app
        run: >
          echo >> "$GITHUB_OUTPUT"
          "database_url=postgres://$DB_USER:$DB_PASSWORD@$DB_HOST:$DB_PORT/$DB_NAME?sslmode=require"
      - name: Initialize tofu
        working-directory: fsharp/api/automate/terraform
        run: tofu init -input=false -upgrade
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.s3-access-key.outputs.out }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.s3-secret-key.outputs.out }}
          TF_VAR_app_version: ${{ needs.build-automate-api.outputs.app_version }}
          TF_VAR_automate_dropbox_client_id: ${{ steps.op-secrets.outputs.automate_dropbox_client_id }}
          TF_VAR_automate_dropbox_client_secret: ${{ steps.op-secrets.outputs.automate_dropbox_client_secret }}
          TF_VAR_automate_postgres_password: ${{ steps.op-secrets.outputs.automate_postgres_password }}
          TF_VAR_automate_todoist_client_id: ${{ steps.op-secrets.outputs.automate_todoist_client_id }}
          TF_VAR_automate_todoist_client_secret: ${{ steps.op-secrets.outputs.automate_todoist_client_secret }}
          TF_VAR_automate_todoist_verification_token: ${{ steps.op-secrets.outputs.automate_todoist_verification_token }}
          TF_VAR_dockerconfigjson: ${{ steps.dockerconfigjson.outputs.out }}
          TF_VAR_kubeconfig_path: ${{ steps.kubeconfig-path.outputs.out }}
          TF_VAR_vultr_api_key: ${{ steps.vultr-api-key.outputs.out }}
      - name: Database Migrations
        uses: dwin/dbmate-action@v1.15
        with:
          command: "up --strict --verbose"
        env:
          DATABASE_URL: ${{ steps.database-url.outputs.database_url }}
          DBMATE_MIGRATIONS_DIR: "./fsharp/api/automate/db/migrations"
          DBMATE_SCHEMA_FILE: "./fsharp/api/automate/db/schema.sql"
          DBMATE_WAIT: "true"
      - name: Deploy
        working-directory: fsharp/api/automate/terraform
        run: tofu apply -auto-approve -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.s3-access-key.outputs.out }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.s3-secret-key.outputs.out }}
          TF_VAR_app_version: ${{ needs.build-automate-api.outputs.app_version }}
          TF_VAR_automate_dropbox_client_id: ${{ steps.op-secrets.outputs.automate_dropbox_client_id }}
          TF_VAR_automate_dropbox_client_secret: ${{ steps.op-secrets.outputs.automate_dropbox_client_secret }}
          TF_VAR_automate_postgres_password: ${{ steps.op-secrets.outputs.automate_postgres_password }}
          TF_VAR_automate_todoist_client_id: ${{ steps.op-secrets.outputs.automate_todoist_client_id }}
          TF_VAR_automate_todoist_client_secret: ${{ steps.op-secrets.outputs.automate_todoist_client_secret }}
          TF_VAR_automate_todoist_verification_token: ${{ steps.op-secrets.outputs.automate_todoist_verification_token }}
          TF_VAR_dockerconfigjson: ${{ steps.dockerconfigjson.outputs.out }}
          TF_VAR_kubeconfig_path: ${{ steps.kubeconfig-path.outputs.out }}
          TF_VAR_vultr_api_key: ${{ steps.vultr-api-key.outputs.out }}
      - name: Commit Schema
        uses: EndBug/add-and-commit@v9
        with:
          add: fsharp/api/automate/db
          default_author: github_actions
          message: "chore(automate-api): Update database schema from production migration"
          pull: "--rebase"
          push: true
